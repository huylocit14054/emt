# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2
jobs:
  lint:
    environment:
      - BUNDLE_GEMFILE: Gemfile.tools
    docker:
      # specify the version you desire here
      - image: circleci/ruby:2.5-stretch-node-browsers
        environment:
          RAILS_ENV: test
          RACK_ENV: test

    working_directory: ~/emt

    steps:
      - checkout
      - restore_cache:
          name: Restoring Gem Tools Cache
          keys:
          - gem-tools-cache-v1-{{ checksum "Gemfile.tools.lock" }}
          # fallback to using the latest cache if no exact match is found
          - gem-tools-cache-v1-
      - run:
          name: Install cmake
          command: sudo apt-get install cmake
      - run:
          name: Install Dependencies
          command: |
            bundle check --path vendor/bundle || bundle install --jobs=4 --retry=3 --path vendor/bundle
      - save_cache:
          name: Saving Gem Tools Cache
          key: gem-tools-cache-v1-{{ checksum "Gemfile.tools.lock" }}
          paths:
            - vendor/bundle
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-cache-v1-{{ checksum "client-emt/yarn.lock" }}
            - yarn-packages-cache-v1-
      - run:
          name: Install Dependencies
          command: cd ~/emt/client-emt && yarn install
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-cache-v1-{{ checksum "client-emt/yarn.lock" }}
          paths:
            - client-emt/node_modules/
      - run:
          name: Run source code analysis
          command: |
            bundle exec pronto run -c origin/master -f github_status -f github_pr_review --exit-code
      - store_artifacts:
          path: ./tmp

  # Build and run test
  build:
    machine:
      image: circleci/classic:edge
    steps:
      - checkout
      - run:
          name: docker-compose build
          command: docker-compose build
      - run:
          name: docker-compose up
          command: docker-compose up -d
      - run:
          name: sleep for waiting launch db
          command: sleep 2
      - run:
          name: "before_test: setup db"
          command: docker-compose run api rails db:create db:migrate
      - run:
          name: test
          command: docker-compose run api rspec
      - store_artifacts:
          path: ~/project/api-emt/coverage
      - store_test_results:
          path: ~/project/api-emt/coverage
      - run:
          name: docker-compose down
          command: docker-compose down

  # Deploy Staging
  deploy-staging:
    machine:
      image: circleci/classic:edge
    steps:
      - checkout
      - run:
          name: Install Ansible
          command: |
            sudo apt-get update && sudo apt-get install software-properties-common
            sudo apt-add-repository ppa:ansible/ansible
            sudo apt-get update && sudo apt-get install ansible
      - run:
          name: Deploy if tests pass and branch is Staging
          command: cd ~/project/scripts/deploy && ansible-playbook deploy.yml -i inventory/staging/hosts 

  # Deploy Production
  deploy-production:
    machine:
      image: circleci/classic:edge
    steps:
      - checkout
      - run:
          name: Install Ansible
          command: |
            sudo apt-get update && sudo apt-get install software-properties-common
            sudo apt-add-repository ppa:ansible/ansible
            sudo apt-get update && sudo apt-get install ansible
      - run:
          name: Deploy if tests pass and tag is version format v.*
          command: cd ~/project/scripts/deploy && ansible-playbook deploy.yml -i inventory/production/hosts
  
workflows:
  version: 2
  release:
    jobs:
      - lint
      - build:
          filters: # The build job must also have a filters tags section, as it is a transient dependency of the deploy job
            tags:
              only: /.*/
      - deploy-staging:
          requires:
            - build
          filters:
            tags:
              ignore: /^v.*/
            branches:
              only: master
      - deploy-production:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
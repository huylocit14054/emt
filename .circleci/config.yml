# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2
jobs:
  lint:
    environment:
      - BUNDLE_GEMFILE: Gemfile.tools
    docker:
      # specify the version you desire here
      - image: circleci/ruby:2.5-stretch-node-browsers
        environment:
          RAILS_ENV: test
          RACK_ENV: test

    working_directory: ~/emt

    steps:
      - checkout
      - restore_cache:
          name: Restoring Gem Tools Cache
          keys:
          - gem-tools-cache-v1-{{ checksum "Gemfile.tools.lock" }}
          # fallback to using the latest cache if no exact match is found
          - gem-tools-cache-v1-
      - run:
          name: Install cmake
          command: sudo apt-get install cmake
      - run:
          name: Install Dependencies
          command: |
            bundle check --path vendor/bundle || bundle install --jobs=4 --retry=3 --path vendor/bundle
      - save_cache:
          name: Saving Gem Tools Cache
          key: gem-tools-cache-v1-{{ checksum "Gemfile.tools.lock" }}
          paths:
            - vendor/bundle
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-cache-v1-{{ checksum "client-emt/yarn.lock" }}
            - yarn-packages-cache-v1-
      - run:
          name: Install Dependencies
          command: cd ~/emt/client-emt && yarn install
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-cache-v1-{{ checksum "client-emt/yarn.lock" }}
          paths:
            - client-emt/node_modules/
      - run:
          name: Run source code analysis
          command: |
            bundle exec pronto run -c origin/master -f github_status -f github_pr_review --exit-code
      - store_artifacts:
          path: ./tmp

  build:
    docker:
      # specify the version you desire here
      - image: circleci/ruby:2.4.1-node-browsers
        environment:
          PGHOST: 127.0.0.1
          PGUSER: postgres
          RAILS_ENV: test

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/postgres:9.4
        environment:
          - POSTGRES_USER=postgres
          - POSTGRES_PASSWORD=password

    working_directory: ~/emt

    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "api-emt/Gemfile.lock" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: api-emt/install dependencies
          command: |
            cd api-emt && bundle install --jobs=4 --retry=3 --path vendor/bundle
      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "api-emt/Gemfile.lock" }}

      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      # Database setup
      - run: cd api-emt && bundle exec rake db:create
      - run: cd api-emt && bundle exec rake db:schema:load

      # run tests!
      # - run:
      #     name: run tests
      #     command: |
      #       mkdir /tmp/test-results
      #       TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)"

      #       bundle exec rspec --format progress \
      #                       --format RspecJunitFormatter \
      #                       --out /tmp/test-results/rspec.xml \
      #                       --format progress \
      #                       $TEST_FILES

      # collect reports
      # - store_test_results:
      #     path: /tmp/test-results
      # - store_artifacts:
      #     path: /tmp/test-results
      #     destination: test-results

workflows:
  version: 2
  release:
    jobs:
      - lint
      - build

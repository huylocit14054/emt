{"version":3,"file":"bundles/pages/projectMembers.js","sources":["webpack:///webpack/bootstrap 89f8b5f1d84e92a0664f","webpack:///components/project/ProjectLayout.js","webpack:///components/project/projectComponent/MembersTab.js","webpack:///components/project/projectComponent/MembersTap/AddMemberForm.js","webpack:///./graphql/mutations.gql","webpack:///./graphql/queries.gql","webpack:///lib/checkLoggedIn.js","webpack:///lib/redirect.js","webpack:///pages/projectMembers.js","webpack:///utils/If.js","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"antd/lib/button\"","webpack:///external \"antd/lib/form\"","webpack:///external \"antd/lib/input\"","webpack:///external \"antd/lib/message\"","webpack:///external \"antd/lib/radio\"","webpack:///external \"antd/lib/select\"","webpack:///external \"antd/lib/table\"","webpack:///external \"antd/lib/tabs\"","webpack:///external \"antd/lib/tag\"","webpack:///external \"graphql-tag\"","webpack:///external \"humanize-string\"","webpack:///external \"next/router\"","webpack:///external \"react\"","webpack:///external \"react-apollo\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 89f8b5f1d84e92a0664f","import { withRouter } from 'next/router';\nimport { Tabs } from 'antd';\nimport { Query } from 'react-apollo';\nimport MembersTab from './projectComponent/MembersTab';\nimport { getProjectById as GET_PROJECT_BY_ID } from '../../graphql/queries.gql';\n\nconst { TabPane } = Tabs;\nclass ProjectLayout extends React.Component {\n  render() {\n    const { activeKey } = this.props;\n    return (\n      <React.Fragment>\n        <Query query={GET_PROJECT_BY_ID} variables={{ id: this.props.router.query.id }}>\n          {({ loading, error, data }) => {\n            if (loading) return 'Loading...';\n            if (error) return `Error! ${error.message}`;\n            const { project } = data;\n            return (\n              <div style={{ marginBottom: '1%' }}>\n                <h2>{project.name}</h2>\n                <p>{project.description}</p>\n              </div>\n            );\n          }}\n        </Query>\n\n        <Tabs activeKey={activeKey}>\n          <TabPane tab=\"Members\" key=\"members\">\n            <MembersTab />\n          </TabPane>\n          <TabPane tab=\"Dimensions\" key=\"dimensions\">\n            Content of Tab Pane 2\n          </TabPane>\n          <TabPane tab=\"Assignments\" key=\"assignments\">\n            Content of Tab Pane 3\n          </TabPane>\n        </Tabs>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withRouter(ProjectLayout);\n\n\n\n// WEBPACK FOOTER //\n// components/project/ProjectLayout.js","import { withRouter } from 'next/router';\nimport { Table, Icon, Divider, Radio, message, Tag } from 'antd';\nimport { Query, Mutation, ApolloConsumer } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport {\n  getCurrentUserOnClient as GET_CURRENT_USER_QUERY,\n  getMembersByProjectId as GET_MEMBERS_BY_PROJECTS_ID,\n} from '../../../graphql/queries.gql';\nimport { updateMemberRoleInProject as UPDATE_MEMBER_ROLE_IN_PROJECT } from '../../../graphql/mutations.gql';\nimport If from '../../../utils/If';\nimport AddMemberForm from './MembersTap/AddMemberForm';\n\nconst humanizeString = require('humanize-string');\n\nconst RadioButton = Radio.Button;\nconst RadioGroup = Radio.Group;\nconst { Column, ColumnGroup } = Table;\n\nfunction onChange(updateMemberRoleInProject, e, memberId) {\n  updateMemberRoleInProject({\n    variables: {\n      input: {\n        projectMemberId: memberId,\n        role: e.target.value,\n      },\n    },\n  });\n  console.log(`radio checked:${e.target.value}`);\n}\n\nclass MembersTab extends React.Component {\n  render() {\n    return (\n      <Query\n        query={GET_MEMBERS_BY_PROJECTS_ID}\n        variables={{ projectId: this.props.router.query.id }}\n      >\n        {({ loading, error, data }) => {\n          if (loading) return 'Loading...';\n          if (error) return `Error! ${error.message}`;\n          return (\n            <ApolloConsumer>\n              {client => {\n                const project = client.readFragment({\n                  id: `Project:${this.props.router.query.id}`,\n                  fragment: gql`\n                    fragment currentProject on Project {\n                      isManagedByCurrentUser\n                    }\n                  `,\n                });\n                const { isManagedByCurrentUser } = project;\n\n                return (\n                  <React.Fragment>\n                    <If condition={isManagedByCurrentUser} then={<AddMemberForm />} else={null} />\n                    <Table loading={loading} dataSource={data.projectMembers} rowKey=\"id\">\n                      <Column\n                        title=\"Username\"\n                        key=\"username\"\n                        render={member => <a href=\"javascript:;\">{member.user.username}</a>}\n                      />\n                      <Column\n                        title=\"Email\"\n                        key=\"email\"\n                        render={member => <a href=\"javascript:;\">{member.user.email}</a>}\n                      />\n                      <Column\n                        title=\"Role\"\n                        key=\"role\"\n                        render={member => {\n                          if (member.user.role === 'root_admin') {\n                            return <Tag color=\"gold\">Root admin</Tag>;\n                          }\n                          return (\n                            <Mutation\n                              mutation={UPDATE_MEMBER_ROLE_IN_PROJECT}\n                              onCompleted={data => {\n                                console.log(data);\n                              }}\n                              onError={error => {\n                                // If you want to send error to external service?\n                                error.graphQLErrors.map(({ message }, i) => {\n                                  message.error(message, 3);\n                                });\n                              }}\n                            >\n                              {(updateMemberRoleInProject, { loading, data, error }) => (\n                                <If\n                                  condition={isManagedByCurrentUser}\n                                  then={\n                                    <RadioGroup\n                                      onChange={e =>\n                                        onChange(updateMemberRoleInProject, e, member.id)\n                                      }\n                                      defaultValue={member.role}\n                                    >\n                                      <RadioButton value=\"member\">Member</RadioButton>\n                                      <RadioButton value=\"project_admin\">Project Admin</RadioButton>\n                                    </RadioGroup>\n                                  }\n                                  else={\n                                    member.role === 'project_admin' ? (\n                                      <Tag color=\"cyan\">{humanizeString(member.role)}</Tag>\n                                    ) : (\n                                      <p>{humanizeString(member.role)}</p>\n                                    )\n                                  }\n                                />\n                              )}\n                            </Mutation>\n                          );\n                        }}\n                      />\n                    </Table>\n                  </React.Fragment>\n                );\n              }}\n            </ApolloConsumer>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default withRouter(MembersTab);\n\n\n\n// WEBPACK FOOTER //\n// components/project/projectComponent/MembersTab.js","import { Form, Input, Select, Button } from 'antd';\n\nconst FormItem = Form.Item;\nconst { Option } = Select;\n\nconst AddMemberForm = Form.create()(class extends React.Component {\n  render() {\n    const { getFieldDecorator } = this.props.form;\n\n    return (\n      <Form layout=\"inline\">\n        <FormItem>\n          {getFieldDecorator('username', {\n              rules: [\n                {\n                  required: true,\n                  message: 'Please input the username/member of user!',\n                },\n              ],\n            })(<Input style={{ width: '300px' }} placeholder=\"username or email\" />)}\n        </FormItem>\n        <FormItem>\n          {getFieldDecorator('role', {\n              initialValue: 'member',\n            })(<Select placeholder=\"Please select member's role\">\n              <Option key=\"member\">member</Option>\n              <Option key=\"admin\">admin</Option>\n               </Select>)}\n        </FormItem>\n        <FormItem>\n          <Button type=\"primary\" htmlType=\"submit\">\n              Add\n          </Button>\n        </FormItem>\n      </Form>\n    );\n  }\n});\n\nexport default AddMemberForm;\n\n\n\n// WEBPACK FOOTER //\n// components/project/projectComponent/MembersTap/AddMemberForm.js","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"mutation\",\"name\":{\"kind\":\"Name\",\"value\":\"loginUser\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"LoginInput\"}}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"loginUser\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"token\"},\"arguments\":[],\"directives\":[]}]}}]}},{\"kind\":\"OperationDefinition\",\"operation\":\"mutation\",\"name\":{\"kind\":\"Name\",\"value\":\"createUser\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"CreateUserInput\"}}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"createUser\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"createdUser\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"username\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"email\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"createdAt\"},\"arguments\":[],\"directives\":[]}]}}]}}]}},{\"kind\":\"OperationDefinition\",\"operation\":\"mutation\",\"name\":{\"kind\":\"Name\",\"value\":\"updateUserInfo\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UpdateUserInput\"}}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"updateUser\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"updatedUser\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"username\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"email\"},\"arguments\":[],\"directives\":[]}]}}]}}]}},{\"kind\":\"OperationDefinition\",\"operation\":\"mutation\",\"name\":{\"kind\":\"Name\",\"value\":\"updatePassword\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UpdatePasswordInput\"}}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"updatePassword\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"passwordIsUpdated\"},\"arguments\":[],\"directives\":[]}]}}]}},{\"kind\":\"OperationDefinition\",\"operation\":\"mutation\",\"name\":{\"kind\":\"Name\",\"value\":\"createProject\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"CreateProjectInput\"}}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"createProject\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"createdProject\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"description\"},\"arguments\":[],\"directives\":[]}]}}]}}]}},{\"kind\":\"OperationDefinition\",\"operation\":\"mutation\",\"name\":{\"kind\":\"Name\",\"value\":\"updateMemberRoleInProject\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UpdateMemberRoleInProjectInput\"}}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"updateMemberRoleInProject\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"updated\"},\"arguments\":[],\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":817}};\n    doc.loc.source = {\"body\":\"mutation loginUser($input: LoginInput!) {\\n  loginUser(input: $input) {\\n    token\\n  }\\n}\\n\\nmutation createUser($input: CreateUserInput!) {\\n  createUser(input: $input) {\\n    createdUser {\\n      id\\n      username\\n      email\\n      createdAt\\n    }\\n  }\\n}\\n\\nmutation updateUserInfo($input: UpdateUserInput!) {\\n  updateUser(input: $input) {\\n    updatedUser {\\n      id\\n      username\\n      email\\n    }\\n  }\\n}\\n\\nmutation updatePassword($input: UpdatePasswordInput!) {\\n  updatePassword(input: $input) {\\n    passwordIsUpdated\\n  }\\n}\\n\\nmutation createProject($input: CreateProjectInput!) {\\n  createProject(input: $input) {\\n    createdProject {\\n      id\\n      name\\n      description\\n    }\\n  }\\n}\\n\\nmutation updateMemberRoleInProject($input: UpdateMemberRoleInProjectInput!) {\\n  updateMemberRoleInProject(input: $input) {\\n    updated\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set(opRefs);\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"loginUser\"] = oneQuery(doc, \"loginUser\");\n        \n        module.exports[\"createUser\"] = oneQuery(doc, \"createUser\");\n        \n        module.exports[\"updateUserInfo\"] = oneQuery(doc, \"updateUserInfo\");\n        \n        module.exports[\"updatePassword\"] = oneQuery(doc, \"updatePassword\");\n        \n        module.exports[\"createProject\"] = oneQuery(doc, \"createProject\");\n        \n        module.exports[\"updateMemberRoleInProject\"] = oneQuery(doc, \"updateMemberRoleInProject\");\n        \n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./graphql/mutations.gql\n// module id = ./graphql/mutations.gql\n// module chunks = 3 4 5","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"getCurrentUser\"},\"variableDefinitions\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"currentUser\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"username\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"role\"},\"arguments\":[],\"directives\":[]}]}}]}},{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"getCurrentUserProfile\"},\"variableDefinitions\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":{\"kind\":\"Name\",\"value\":\"profile\"},\"name\":{\"kind\":\"Name\",\"value\":\"currentUser\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"username\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"email\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"role\"},\"arguments\":[],\"directives\":[]}]}}]}},{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"getCurrentUserOnClient\"},\"variableDefinitions\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"currentUser\"},\"arguments\":[],\"directives\":[{\"kind\":\"Directive\",\"name\":{\"kind\":\"Name\",\"value\":\"client\"},\"arguments\":[]}],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"username\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"role\"},\"arguments\":[],\"directives\":[]}]}}]}},{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"getAllUsers\"},\"variableDefinitions\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"users\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"username\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"email\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"createdAt\"},\"arguments\":[],\"directives\":[]}]}}]}},{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"getProjectOfCurrentUser\"},\"variableDefinitions\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"projectsAsMemberOfCurrentUser\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"description\"},\"arguments\":[],\"directives\":[]}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"projectsAsAdminOfCurrentUser\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"description\"},\"arguments\":[],\"directives\":[]}]}}]}},{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"getMembersByProjectId\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"projectId\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ID\"}}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"projectMembers\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"projectId\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"projectId\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"role\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"user\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"email\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"username\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"role\"},\"arguments\":[],\"directives\":[]}]}}]}}]}},{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"getProjectById\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ID\"}}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"project\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"description\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"isManagedByCurrentUser\"},\"arguments\":[],\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":817}};\n    doc.loc.source = {\"body\":\"query getCurrentUser {\\n  currentUser {\\n    id\\n    username\\n    role\\n  }\\n}\\n\\nquery getCurrentUserProfile {\\n  profile: currentUser {\\n    id\\n    username\\n    email\\n    role\\n  }\\n}\\n\\nquery getCurrentUserOnClient {\\n  currentUser @client {\\n    id\\n    username\\n    role\\n  }\\n}\\n\\nquery getAllUsers {\\n  users {\\n    id\\n    username\\n    email\\n    createdAt\\n  }\\n}\\n\\nquery getProjectOfCurrentUser {\\n  projectsAsMemberOfCurrentUser {\\n    id\\n    name\\n    description\\n  }\\n  projectsAsAdminOfCurrentUser {\\n    id\\n    name\\n    description\\n  }\\n}\\n\\nquery getMembersByProjectId($projectId: ID!) {\\n  projectMembers(projectId: $projectId) {\\n    id\\n    role\\n    user {\\n      id\\n      email\\n      username\\n      role\\n    }\\n  }\\n}\\n\\nquery getProjectById($id: ID!) {\\n  project(id: $id) {\\n    id\\n    name\\n    description\\n    isManagedByCurrentUser\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set(opRefs);\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"getCurrentUser\"] = oneQuery(doc, \"getCurrentUser\");\n        \n        module.exports[\"getCurrentUserProfile\"] = oneQuery(doc, \"getCurrentUserProfile\");\n        \n        module.exports[\"getCurrentUserOnClient\"] = oneQuery(doc, \"getCurrentUserOnClient\");\n        \n        module.exports[\"getAllUsers\"] = oneQuery(doc, \"getAllUsers\");\n        \n        module.exports[\"getProjectOfCurrentUser\"] = oneQuery(doc, \"getProjectOfCurrentUser\");\n        \n        module.exports[\"getMembersByProjectId\"] = oneQuery(doc, \"getMembersByProjectId\");\n        \n        module.exports[\"getProjectById\"] = oneQuery(doc, \"getProjectById\");\n        \n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./graphql/queries.gql\n// module id = ./graphql/queries.gql\n// module chunks = 0 3 4 5","import gql from \"graphql-tag\";\nimport { getCurrentUser as GET_CURRENT_USER_QUERY } from \"../graphql/queries.gql\";\nexport default apolloClient =>\n  apolloClient\n    .query({ query: GET_CURRENT_USER_QUERY })\n    .then(({ data }) => {\n      console.log(data);\n      return { currentUser: data.currentUser };\n    })\n    .catch(err => {\n      console.log(err);\n      // Fail gracefully\n      return { currentUser: {} };\n    });\n\n\n\n// WEBPACK FOOTER //\n// lib/checkLoggedIn.js","import Router from 'next/router'\n\nexport default (context, target) => {\n  if (context.res) {\n    // server\n    // 303: \"See other\"\n    context.res.writeHead(303, { Location: target })\n    context.res.end()\n  } else {\n    // In the browser, we just pretend like this never even happened ;)\n    Router.replace(target)\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// lib/redirect.js","import ProjectLayout from \"../components/project/ProjectLayout\";\nimport redirect from \"../lib/redirect\";\nimport checkLoggedIn from \"../lib/checkLoggedIn\";\n\nexport default class ProjectMembers extends React.Component {\n  static async getInitialProps(context) {\n    const { currentUser } = await checkLoggedIn(context.apolloClient);\n    const router = context.router;\n    if (!currentUser) {\n      // Already signed in? No need to continue.\n      // Throw them back to the main page\n      redirect(context, \"/\");\n    }\n    return { currentUser, router };\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <ProjectLayout\n          activeKey=\"members\"\n          currentUser={this.props.currentUser}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// pages/projectMembers.js","const If = props => {\n  const condition = props.condition || false;\n  const positive = props.then || null;\n  const negative = props.else || null;\n\n  return condition ? positive : negative;\n};\n\nexport default If;\n\n\n\n// WEBPACK FOOTER //\n// utils/If.js","module.exports = require(\"@babel/runtime/regenerator\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@babel/runtime/regenerator\"\n// module id = @babel/runtime/regenerator\n// module chunks = 0 3 4 5","module.exports = require(\"antd/lib/button\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"antd/lib/button\"\n// module id = antd/lib/button\n// module chunks = 3 4","module.exports = require(\"antd/lib/form\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"antd/lib/form\"\n// module id = antd/lib/form\n// module chunks = 3 4 5","module.exports = require(\"antd/lib/input\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"antd/lib/input\"\n// module id = antd/lib/input\n// module chunks = 3 4 5","module.exports = require(\"antd/lib/message\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"antd/lib/message\"\n// module id = antd/lib/message\n// module chunks = 3 4 5","module.exports = require(\"antd/lib/radio\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"antd/lib/radio\"\n// module id = antd/lib/radio\n// module chunks = 3","module.exports = require(\"antd/lib/select\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"antd/lib/select\"\n// module id = antd/lib/select\n// module chunks = 3","module.exports = require(\"antd/lib/table\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"antd/lib/table\"\n// module id = antd/lib/table\n// module chunks = 3","module.exports = require(\"antd/lib/tabs\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"antd/lib/tabs\"\n// module id = antd/lib/tabs\n// module chunks = 3","module.exports = require(\"antd/lib/tag\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"antd/lib/tag\"\n// module id = antd/lib/tag\n// module chunks = 3","module.exports = require(\"graphql-tag\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"graphql-tag\"\n// module id = graphql-tag\n// module chunks = 3 4 5","module.exports = require(\"humanize-string\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"humanize-string\"\n// module id = humanize-string\n// module chunks = 3","module.exports = require(\"next/router\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"next/router\"\n// module id = next/router\n// module chunks = 0 3 4 5","module.exports = require(\"react\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"react\"\n// module id = react\n// module chunks = 0 3 4 5","module.exports = require(\"react-apollo\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"react-apollo\"\n// module id = react-apollo\n// module chunks = 0 3 4 5"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC1CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC5HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACvbA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AACA;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACRA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;A","sourceRoot":""}
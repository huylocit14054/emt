{"version":3,"file":"4.045188fa4f6941df6b4f.hot-update.js","sources":["webpack:///components/projects/projectsList.js","webpack:///./graphql/queries.gql","webpack:///lib/checkLoggedIn.js"],"sourcesContent":["import { List, Card, Avatar, Divider, Icon, Button } from \"antd\";\nimport { Query } from \"react-apollo\";\nimport { getProjectOfCurrentUser as GET_PROJECTS_OF_CURRENT_USER } from \"../../graphql/queries.gql\";\nimport ListItem from \"./projectsList/ListItem\";\nimport CreateProjectModal from \"./projectsList/CreateProjectModal\";\n\nconst truncate = require(\"truncate\");\n\nclass ProjectsList extends React.Component {\n  render() {\n    return (\n      <div className=\"projects-list\">\n        <CreateProjectModal />\n        <Query query={GET_PROJECTS_OF_CURRENT_USER}>\n          {({ loading, error, data }) => {\n            if (loading) return \"Loading...\";\n            if (error) return `Error! ${error.message}`;\n            const {\n              projectsAsAdminOfCurrentUser,\n              projectsAsMemberOfCurrentUser\n            } = data;\n            return (\n              <div>\n                {projectsAsAdminOfCurrentUser.length > 0 && (\n                  <React.Fragment>\n                    <Divider orientation=\"left\">\n                      <Icon type=\"solution\" style={{ marginRight: 8 }} />As\n                      Admin\n                    </Divider>\n                    <List\n                      grid={{\n                        gutter: 16,\n                        xs: 1,\n                        sm: 2,\n                        md: 4,\n                        lg: 4,\n                        xl: 6,\n                        xxl: 3\n                      }}\n                      dataSource={projectsAsAdminOfCurrentUser}\n                      renderItem={project => (\n                        <List.Item>\n                          <Card>\n                            <h2>\n                              <b>{project.name}</b>\n                            </h2>\n                            <p>{truncate(project.description, 70)}</p>\n                            <div>\n                              <Avatar icon=\"user\" />\n                              <Avatar>U</Avatar>\n                              <Avatar>USER</Avatar>\n                              <Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />\n                              <Avatar\n                                style={{\n                                  color: \"#f56a00\",\n                                  backgroundColor: \"#fde3cf\"\n                                }}\n                              >\n                                U\n                              </Avatar>\n                              <Avatar\n                                style={{ backgroundColor: \"#87d068\" }}\n                                icon=\"user\"\n                              />\n                            </div>\n                          </Card>\n                        </List.Item>\n                      )}\n                    />\n\n                    {projectsAsMemberOfCurrentUser.length > 0 && (\n                      <React.Fragment>\n                        <Divider orientation=\"left\">\n                          <Icon type=\"user\" style={{ marginRight: 8 }} />\n                          As Member\n                        </Divider>\n                        <List\n                          grid={{\n                            gutter: 16,\n                            xs: 1,\n                            sm: 2,\n                            md: 4,\n                            lg: 4,\n                            xl: 6,\n                            xxl: 3\n                          }}\n                          dataSource={projectsAsMemberOfCurrentUser}\n                          renderItem={project => (\n                            <List.Item>\n                              <Card>\n                                <h2>\n                                  <b>{project.name}</b>\n                                </h2>\n                                <p>{truncate(project.description, 70)}</p>\n                                <div>\n                                  <Avatar icon=\"user\" />\n                                  <Avatar>U</Avatar>\n                                  <Avatar>USER</Avatar>\n                                  <Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />\n                                  <Avatar\n                                    style={{\n                                      color: \"#f56a00\",\n                                      backgroundColor: \"#fde3cf\"\n                                    }}\n                                  >\n                                    U\n                                  </Avatar>\n                                  <Avatar\n                                    style={{ backgroundColor: \"#87d068\" }}\n                                    icon=\"user\"\n                                  />\n                                </div>\n                              </Card>\n                            </List.Item>\n                          )}\n                        />\n                      </React.Fragment>\n                    )}\n                  </React.Fragment>\n                )}\n              </div>\n            );\n          }}\n        </Query>\n      </div>\n    );\n  }\n}\n\nexport default ProjectsList;\n\n\n\n// WEBPACK FOOTER //\n// components/projects/projectsList.js","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"getCurrentUser\"},\"variableDefinitions\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"currentUser\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"username\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"role\"},\"arguments\":[],\"directives\":[]}]}}]}},{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"getCurrentUserOnClient\"},\"variableDefinitions\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"currentUser\"},\"arguments\":[],\"directives\":[{\"kind\":\"Directive\",\"name\":{\"kind\":\"Name\",\"value\":\"client\"},\"arguments\":[]}],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"username\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"role\"},\"arguments\":[],\"directives\":[]}]}}]}},{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"getAllUsers\"},\"variableDefinitions\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"users\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"username\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"email\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"createdAt\"},\"arguments\":[],\"directives\":[]}]}}]}},{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"getProjectOfCurrentUser\"},\"variableDefinitions\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"projectsAsMemberOfCurrentUser\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"description\"},\"arguments\":[],\"directives\":[]}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"projectsAsAdminOfCurrentUser\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"description\"},\"arguments\":[],\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":420}};\n    doc.loc.source = {\"body\":\"query getCurrentUser {\\n  currentUser {\\n    id\\n    username\\n    role\\n  }\\n}\\n\\nquery getCurrentUserOnClient {\\n  currentUser @client {\\n    id\\n    username\\n    role\\n  }\\n}\\n\\nquery getAllUsers {\\n  users {\\n    id\\n    username\\n    email\\n    createdAt\\n  }\\n}\\n\\nquery getProjectOfCurrentUser {\\n  projectsAsMemberOfCurrentUser {\\n    id\\n    name\\n    description\\n  }\\n  projectsAsAdminOfCurrentUser {\\n    id\\n    name\\n    description\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set(opRefs);\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"getCurrentUser\"] = oneQuery(doc, \"getCurrentUser\");\n        \n        module.exports[\"getCurrentUserOnClient\"] = oneQuery(doc, \"getCurrentUserOnClient\");\n        \n        module.exports[\"getAllUsers\"] = oneQuery(doc, \"getAllUsers\");\n        \n        module.exports[\"getProjectOfCurrentUser\"] = oneQuery(doc, \"getProjectOfCurrentUser\");\n        \n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./graphql/queries.gql\n// module id = ./graphql/queries.gql\n// module chunks = 0 4 5","import gql from \"graphql-tag\";\nimport { getCurrentUser as GET_CURRENT_USER_QUERY } from \"../graphql/queries.gql\";\nexport default apolloClient =>\n  apolloClient\n    .query({ query: GET_CURRENT_USER_QUERY })\n    .then(({ data }) => {\n      console.log(data);\n      return { currentUser: data.currentUser };\n    })\n    .catch(err => {\n      console.log(err);\n      // Fail gracefully\n      return { currentUser: {} };\n    });\n\n\n\n// WEBPACK FOOTER //\n// lib/checkLoggedIn.js"],"mappings":";;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzHA;AAAA;AAAA;AAAA;AAAA;AAYA;;;;;A","sourceRoot":""}
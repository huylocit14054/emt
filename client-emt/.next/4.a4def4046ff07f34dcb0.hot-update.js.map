{"version":3,"file":"4.a4def4046ff07f34dcb0.hot-update.js","sources":["webpack:///components/projects/projectsList/CreateProjectModal.js"],"sourcesContent":["import { Button, message, Icon, List, Card } from \"antd\";\nimport { Mutation } from \"react-apollo\";\nimport { createProject as CREATE_PROJECT_MUTATION } from \"../../../graphql/mutations.gql\";\nimport { getProjectOfCurrentUser as GET_PROJECTS_OF_CURRENT_USER_QUERY } from \"../../../graphql/queries.gql\";\nimport CreateProjectForm from \"./createProjectModal/CreateProjectForm\";\n\nconst addNewProject = [\n  {\n    title: \"Add new project\"\n  }\n];\nclass CreateProjectModal extends React.Component {\n  state = {\n    visible: false\n  };\n  showModal = () => {\n    this.setState({ visible: true });\n  };\n  handleCancel = () => {\n    this.setState({ visible: false });\n  };\n  handleCreate = createProject => {\n    const form = this.formRef.props.form;\n    form.validateFields((err, values) => {\n      if (err) {\n        return;\n      }\n      createProject({\n        variables: {\n          input: {\n            attributes: JSON.stringify(values)\n          }\n        },\n        update: (\n          store,\n          {\n            data: {\n              createProject: { createdProject }\n            }\n          }\n        ) => {\n          console.log(createdProject);\n        }\n      });\n    });\n  };\n  saveFormRef = formRef => {\n    this.formRef = formRef;\n  };\n  render() {\n    return (\n      <React.Fragment>\n        <List\n          grid={{\n            gutter: 16,\n            xs: 1,\n            sm: 2,\n            md: 4,\n            lg: 4,\n            xl: 6,\n            xxl: 3\n          }}\n          dataSource={addNewProject}\n          renderItem={item => (\n            <List.Item>\n              <Card className=\"add-project-btn\" onClick={this.showModal}>\n                <b>\n                  <Icon type=\"plus\" /> {item.title}\n                </b>\n              </Card>\n            </List.Item>\n          )}\n        />\n        <br />\n        <br />\n        <Mutation\n          mutation={CREATE_PROJECT_MUTATION}\n          onCompleted={data => {\n            console.log(data);\n            const form = this.formRef.props.form;\n            // this.setState({ visible: false });\n            message.success(\"Project Created\");\n            form.resetFields();\n          }}\n          onError={error => {\n            // If you want to send error to external service?\n            error.graphQLErrors.map(({ message }, i) => {\n              message.error(message, 3);\n            });\n          }}\n        >\n          {(createProject, { loading, data, error }) => (\n            <CreateProjectForm\n              wrappedComponentRef={this.saveFormRef}\n              confirmLoading={loading}\n              visible={this.state.visible}\n              onCancel={this.handleCancel}\n              onCreate={() => this.handleCreate(createProject)}\n            />\n          )}\n        </Mutation>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default CreateProjectModal;\n\n\n\n// WEBPACK FOOTER //\n// components/projects/projectsList/CreateProjectModal.js"],"mappings":";;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgFA;AAKA;;AA3EA;;;;;A","sourceRoot":""}
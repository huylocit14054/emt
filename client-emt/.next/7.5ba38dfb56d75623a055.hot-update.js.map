{"version":3,"file":"7.5ba38dfb56d75623a055.hot-update.js","sources":["webpack:///components/profile/userProfile/UpdateInfoForm.js"],"sourcesContent":["import { Mutation, Query, withApollo } from 'react-apollo';\nimport { Form, Input, Spin, Icon, message, Button } from 'antd';\nimport { updateUserInfo as UPDATE_USER_INFO } from '../../../graphql/mutations.gql';\nimport { getCurrentUserProfile as GET_CURRENT_USER_PROFILE_QUERY } from '../../../graphql/queries.gql';\n\nconst FormItem = Form.Item;\n\nconst antIcon = <Icon type=\"loading\" style={{ fontSize: 24 }} spin />;\n\nconst UpdateUserForm = Form.create({})(class extends React.Component {\n    handleUpdate = (e, updateUserInfo) => {\n      e.preventDefault();\n      const { form } = this.props;\n      form.validateFields((err, values) => {\n        if (err) {\n          return;\n        }\n        updateUserInfo({\n          variables: {\n            input: {\n              attributes: JSON.stringify(values),\n            },\n          },\n        });\n      });\n    };\n\n    render() {\n      const { form } = this.props;\n      const { getFieldDecorator } = form;\n      const formItemLayout = {\n        labelCol: {\n          xs: { span: 24 },\n          sm: { span: 2 },\n        },\n        wrapperCol: {\n          xs: { span: 24 },\n          sm: { span: 6 },\n        },\n      };\n      const tailFormItemLayout = {\n        wrapperCol: {\n          xs: {\n            span: 24,\n            offset: 0,\n          },\n          sm: {\n            span: 8,\n            offset: 2,\n          },\n        },\n      };\n\n      return (\n        <Mutation\n          mutation={UPDATE_USER_INFO}\n          onCompleted={({ updateUserInfo: { updatedUser } }) => {\n            message.success('Your Profile is updated!', 3);\n          }}\n          onError={error => {\n            // If you want to send error to external service?\n            error.graphQLErrors.map(({ message }, i) => {\n              message.error(message, 3);\n            });\n          }}\n        >\n          {(updateUserInfo, { loading, data, error }) => (\n            <Spin indicator={antIcon} spinning={loading} tip=\"Updating Profile...\">\n              <br />\n              <Query\n                query={GET_CURRENT_USER_PROFILE_QUERY}\n                onCompleted={data => {}}\n                onError={error => {\n                  // If you want to send error to external service?\n                }}\n              >\n                {({ loading, error, data }) => {\n                  const { profile } = data;\n                  if (loading) return <p>loading...</p>;\n\n                  return (\n                    <Form onSubmit={e => this.handleUpdate(e, updateUserInfo)}>\n                      <FormItem {...formItemLayout} label=\"id\" style={{ display: 'none' }}>\n                        {getFieldDecorator('id', {\n                          initialValue: profile.id,\n                        })(<Input />)}\n                      </FormItem>\n                      <FormItem {...formItemLayout} label=\"Username\">\n                        {getFieldDecorator('username', {\n                          rules: [\n                            {\n                              required: true,\n                              message: 'Please input your username!',\n                            },\n                          ],\n                          initialValue: profile.username,\n                        })(<Input />)}\n                      </FormItem>\n                      <FormItem {...formItemLayout} label=\"Email\">\n                        {getFieldDecorator('email', {\n                          rules: [\n                            {\n                              required: true,\n                              message: 'Please input your email!',\n                            },\n                          ],\n                          initialValue: profile.email,\n                        })(<Input />)}\n                      </FormItem>\n\n                      <FormItem {...tailFormItemLayout}>\n                        <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\n                          Save\n                        </Button>\n                      </FormItem>\n                    </Form>\n                  );\n                }}\n              </Query>\n            </Spin>\n          )}\n        </Mutation>\n      );\n    }\n});\n\nexport default withApollo(UpdateUserForm);\n\n\n\n// WEBPACK FOOTER //\n// components/profile/userProfile/UpdateInfoForm.js"],"mappingslHA;AAAA;AAqHA;;;;;A","sourceRoot":""}
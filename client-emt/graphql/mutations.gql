#import "./fragments/BasicRuleInfo.gql"

mutation loginUser($input: LoginInput!) {
  loginUser(input: $input) {
    token
  }
}

mutation createUser($input: CreateUserInput!) {
  createUser(input: $input) {
    createdUser {
      id
      username
      email
      createdAt
      avatar
    }
  }
}

mutation updateUserInfo($input: UpdateUserInput!) {
  updateUser(input: $input) {
    updatedUser {
      id
      username
      email
    }
  }
}

mutation updateAvatar($input: UpdateAvatarInput!) {
  updateAvatar(input: $input) {
    avatarUrl
  }
}

mutation createDimension($input: CreateDimensionInput!) {
  createDimension(input: $input) {
    createdDimension {
      id
      name
      category
      createdAt
      options {
        id
        name
      }
    }
  }
}

mutation updateDimension($input: UpdateDimensionInput!) {
  updateDimension(input: $input) {
    updatedDimension {
      id
      name
      category
      options {
        id
        name
      }
    }
  }
}

mutation createOptions($input: CreateOptionsInput!) {
  createOptions(input: $input) {
    createdOptions {
      id
      name
    }
  }
}
mutation updateProject($input: UpdateProjectInput!) {
  updateProject(input: $input) {
    updatedProject {
      id
      name
      description
    }
  }
}
mutation addMemberToProject($input: AddMemberToProjectInput!) {
  addMemberToProject(input: $input) {
    addedMember {
      id
      role
      user {
        id
        email
        username
        role
        avatar
      }
    }
  }
}

mutation assignDimensionsForMembers($input: AssignDimensionsForMembersInput!) {
  assignDimensionsForMembers(input: $input){
    assigned
  }

}

mutation deteteProject($input: DeleteProjectInput!){
  deteteProject(input: $input){
    deleted
  }
}

mutation updatePassword($input: UpdatePasswordInput!) {
  updatePassword(input: $input) {
    passwordIsUpdated
  }
}

mutation createProject($input: CreateProjectInput!) {
  createProject(input: $input) {
    createdProject {
       id
      name
      description
      shortenMembers {
        id
        avatar
      }
      memberCount
      }
  }
}

mutation updateMemberRoleInProject($input: UpdateMemberRoleInProjectInput!) {
  updateMemberRoleInProject(input: $input) {
    updated
  }
}

mutation updateMemberAssignments($input: UpdateMemberAssignmentsInput!) {
  updateMemberAssignments(input: $input){
    updatedMember {
        id
        user {
          id
          username
          avatar
        }
        authorizedDimensions
        authorizations {
          dimension {
            id
          }
          optionAuthorizations {
            option {
              id
              name
              dimension {
                id
              }
            }
          }
        }
    }
  }
}

mutation createRule($input: CreateRuleInput!){
  createRule(input: $input){
    createdRule {
      ...BasicRuleInfo
    }
  }
}

mutation deleteRule($input: DeleteRuleInput!){
  deleteRule(input: $input){
    deleted
  }
}
